{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"一级","path":"yi","rule":"js:\n/*\nby α(zetalpha)\n一级封装\n动态分类 列表创建 自动下一页\nver 20231017 1.0\n*/\n\n//随机颜色\nvar getRangeColors = function() {\n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);\n}\n\n//动态分类\nfunction dynamicClass(options) {\n    const obj = {\n        //默认值\n        layout: \"undefined\",\n        html: \"empty\",\n        page: 0,\n        分类颜色: \"#FA7298\",\n        折叠: \"““””<b>\" + \"∧\".fontcolor(\"#1aad19\") + \"</b>\",\n        展开: \"““””<b>\" + \"∨\".fontcolor(\"#FF0000\") + \"</b>\",\n        open: true,\n        state: MY_RULE.url,\n        search: false,\n        clears: [],\n        clearall: [\"yi_firstpage\"],\n        debug: false,\n\n        预设(param) {\n            if (param == undefined) {\n                param = [];\n            }\n            Object.keys(param).forEach((property) => {\n                // 对每个属性名执行操作\n                const value = param[property]; // 获取属性值\n                // 在这里执行您的操作\n                this[property] = value;\n                if (this.debug) {\n                    console.log(property + \":\" + value);\n                }\n            });\n        },\n        evalJSRule(item,\n            jsRule) {\n            let rule = jsRule.replace(\"@js:\",\n                \"\");\n            rule = rule.trim();\n            //log($.stringify(rule))\n            let input = item;\n            if (rule.startsWith(\"(\")) {\n                eval(\"result = \" + rule);\n            } else {\n                /**\n                 * 还原成 $.toString(...) 的最终结果，达到最终处理方式跟上面的 if 一致的目的\n                 */\n                eval(\"result = \" + \"(() => {\" + rule + \"})()\");\n            }\n            return result || \"\";\n        },\n        getTitle(src, category) {\n            let title = \"\";\n            let titleRule = category || \"a&&Text\";\n            if (titleRule.startsWith(\"@js:\")) {\n                title = this.evalJSRule(src, titleRule);\n            } else {\n                title = parseDomForHtml(src, titleRule);\n            }\n            return title || \"\";\n        },\n        getUrl(src, category) {\n            let url = \"\";\n            let urlRule = category.链接 || \"a&&href\";\n            if (urlRule.startsWith(\"@js:\")) {\n                url = this.evalJSRule(src, urlRule);\n            } else {\n                url = pd(src, urlRule);\n            }\n            if (typeof category.链接处理 == \"function\") {\n                url = category.链接处理(url);\n            }\n            return url || \"\";\n        },\n        isNull(param) {\n            if (param == null) {\n                return this;\n            }\n            return false;\n        },\n        isBoolean(variable) {\n            if (typeof variable !== \"boolean\") {\n                throw new Error(\"开启折叠请传入布尔值\");\n            }\n        },\n        清除(list) {\n            if (this.isNull(list)) {\n                return this;\n            }\n            if (list.constructor == String) {\n                throw new Error(\"清除报错:请传列表\");\n            }\n            this.clears = list;\n            return this;\n        },\n        全清(list) {\n            if (this.isNull(list)) {\n                return this;\n            }\n            var c = this.clearall;\n            list = c.concat(list);\n            this.clearall = list;\n            return this;\n        },\n        源码(input) {\n            this.html = input;\n            return this;\n        },\n        界面(input) {\n            this.layout = input;\n            return this;\n        },\n        页码(input) {\n            this.page = input;\n            return this;\n        },\n        状态(input) {\n            this.state = input;\n            return this;\n        },\n        开启搜索(input) {\n            if (input == undefined) {\n                input = true;\n            }\n            this.search = input;\n            return this;\n        },\n        开启折叠(input) {\n            if (input == undefined) {\n                input = true;\n            }\n            this.isBoolean(input);\n            this.open = input;\n            return this;\n        },\n        setTitle(k, i, t) {\n            return k == i ? \"““””\" + t.fontcolor(this.分类颜色) : t;\n        },\n        action(obj) {\n            return [{\n                title: \"清除状态\",\n                js: $.toString((obj) => {\n                    log(obj);\n                    clearMyVar(obj.state);\n                    clearMyVar(\"head.cate\");\n                    clearMyVar('cate_button');\n                    obj.all.forEach((item) => {\n                        clearMyVar(item);\n                    });\n                    obj.cl.forEach((item) => {\n                        clearMyVar(item);\n                    });\n                    refreshPage();\n                }, obj),\n            }, ];\n        },\n        checkParam() {\n            var obj = {};\n            if (this.page == 0 && typeof page == \"undefined\") {\n                throw new Error(\"请传入页码\");\n            } else {\n                if (typeof page == \"undefined\") {\n                    obj[\"页码\"] = this.page;\n                } else {\n                    obj[\"页码\"] = page;\n                }\n            }\n            if (this.html == \"empty\" && typeof html == \"undefined\") {\n                throw new Error(\"请传入源码\");\n            } else {\n                if (typeof html == \"undefined\") {\n                    obj[\"源码\"] = this.html;\n                } else {\n                    obj[\"源码\"] = html;\n                }\n            }\n            if (this.layout == \"undefined\" && typeof d == \"undefined\") {\n                throw new Error(\"请传入界面\");\n            } else {\n                if (typeof d == \"undefined\") {\n                    obj[\"界面\"] = this.layout;\n                } else {\n                    obj[\"界面\"] = d;\n                }\n            }\n            return obj;\n        },\n        创建动态分类(ruleObj) {\n            let items = [];\n            let cates = [];\n            if (ruleObj == undefined) {\n                ruleObj = [];\n            }\n            //初始化变量开始\n            const param = this.checkParam();\n            const page = param.页码;\n            const html = param.源码;\n            const d = param.界面;\n            const 状态 = this.state;\n            const search = this.search;\n            const empty = \"hiker://empty\";\n            const 折叠状态 = this.open;\n            var 展开 = this.展开;\n            var 折叠 = this.折叠;\n            var 全清 = this.clearall;\n            var 清除 = this.clears;\n            //初始化变量结束\n            let init_cate = new Array(20).fill(\"0\");\n            const fold = getMyVar(MY_RULE.group, \"0\");\n            const cate_temp = JSON.parse(\n                getMyVar(\"head.cate\", JSON.stringify(init_cate))\n            );\n            if (search && page == 1) {\n                items.push({\n                    title: \"\",\n                    url: \"'hiker://search?rule=\" + MY_RULE.title + \"&s='+input\",\n                    desc: \"搜索关键词\",\n                    col_type: \"input\",\n                    extra: {\n                        defaultValue: getMyVar(\"keyword\", \"\"),\n                        onChange: $.toString(() => {\n                            putMyVar(\"keyword\", input);\n                        }),\n                    },\n                });\n            }\n            const categories = [];\n            ruleObj.forEach((x) => {\n                var list = [];\n                //log(x)\n                if (x.json != undefined) {\n                    x.json.map(k => {\n                        categories.push(JSON.stringify(k).replace(/^\\[|\\]$/g, ''))\n                    })\n                    //categories.push(x.json)\n                }\n                if (x.一级定位) {\n                    if (x.一级定位.startsWith(\"@js:\")) {\n                        list = this.evalJSRule(html, x.一级定位);\n                    } else {\n                        list = pdfa(html, x.一级定位);\n                    }\n                }\n                if (x.大类定位) {\n                    if (x.大类定位.startsWith(\"@js:\")) {\n                        list = this.evalJSRule(html, x.大类定位);\n                    } else {\n                        list = [pdfa(html, x.大类定位).join('\\n')];\n                    }\n                }\n                //--额外处理--\n                if (('增加' in x)) {\n                    if (x.增加.constructor == String) {\n                        x.增加 = eval(x.增加);\n                    }\n                    slist = x.增加.concat(slist);\n                }\n                if (('补充' in x)) {\n                    if (x.补充.constructor == String) {\n                        x.补充 = eval(x.补充);\n                    }\n                    slist = slist.concat(x.补充);\n                }\n                //--额外处理--\n                var 一级 = list.map((s) => {\n                    var slist = [];\n                    if (!(\"小类\" in x)) {\n                        x.小类 = \"body&&a:not(:matches(首页)):not(a:not([href]))\";\n                    }\n                    if (x.小类.startsWith(\"@js:\")) {\n                        slist = this.evalJSRule(s, x.小类);\n                    } else {\n                        slist = pdfa(s, x.小类);\n                    }\n                    var 定位 = slist.map((item) => {\n                        var title = this.getTitle(item, x.标题);\n                        var url = this.getUrl(item, x);\n                        var obj = {\n                            title: title,\n                            url: url\n                        };\n                        return JSON.stringify(obj);\n                    });\n                    return 定位;\n                });\n                //log(一级)\n                //log(一级.length)\n                if (一级.length == 1) {\n                    categories.push(一级.join(\"\\n\"));\n                } else {\n                    一级.forEach((item) => {\n                        categories.push(item.join(\",\"));\n                    });\n                }\n                //log(categories)\n            });\n            if (折叠状态) {\n                if (page == 1) {\n                    items.push({\n                        title: fold === \"1\" ? 折叠 : 展开,\n                        url: $(\"#noLoading#\").lazyRule(\n                            (title, fold, u, all, exps) => {\n                                var fold = getMyVar(MY_RULE.group, fold);\n\n                                var [展开, 折叠] = exps;\n\n                                if (fold == 1) {\n                                    var cx = findItemsByCls(title + 'cate_button');\n                                    storage0.putMyVar('cate_button', cx);\n                                    deleteItemByCls(title + 'cate_button');\n\n                                } else {\n                                    var cx = storage0.getMyVar('cate_button', []).map(x => {\n                                        x['col_type'] = x['col_type'] ? x['col_type'] : x['type'];\n                                        return x;\n                                    });\n                                    addItemAfter(title + 'cate_line', cx)\n                                }\n\n                                /*all.forEach((item) => {\n                                  clearMyVar(item);\n                                });*/\n                                updateItem(title + 'cate_exp', {\n                                    title: fold == 1 ? 展开 : 折叠,\n                                })\n\n                                putMyVar(MY_RULE.group, fold === \"1\" ? \"0\" : \"1\");\n\n                                //refreshPage(false);\n                                return \"hiker://empty\";\n                            },\n                            MY_RULE.title,\n                            fold,\n                            状态,\n                            全清, [展开,\n                                折叠\n                            ],\n                        ),\n                        col_type: \"scroll_button\",\n                        extra: {\n                            id: MY_RULE.title + 'cate_exp',\n                            longClick: this.action({\n                                state: 状态,\n                                all: 全清,\n                                cl: 清除,\n                            }),\n                        },\n                    });\n                }\n            }\n            if (page == 1) {\n                categories.forEach((category, index) => {\n                    //log(category)\n                    let sub_categories = [];\n                    /*if (小类定位.includes(\";\")) {\n                      sub_categories = pdfa(category, 小类定位.split(\";\")[0]);\n                      if (sub_categories.length == 0) {\n                        sub_categories = pdfa(category, 小类定位.split(\";\")[1]);\n                      }\n                    } else {*/\n                    //log(index)\n                    sub_categories = JSON.parse(`[${category}]`);\n                    //log(sub_categories)\n                    // sub_categories = pdfa(category, 小类定位);\n                    //}\n                    if (index === 0) {\n                        //大类\n                        sub_categories.forEach((item, key) => {\n\n                            //let title = pdfh(item, _大类标题);\n                            let title = item.title;\n\n                            if (typeof 排除 != \"undefined\" && 排除 != \"\") {\n                                title = title.replace(newRegExp(排除, \"g\"), \"\");\n                            }\n                            let json = ''\n                            json = item.url;\n\n                            let params = {\n                                cate_temp: cate_temp,\n                                key: key,\n                                page: page,\n                                clears: 清除,\n                                json: json,\n                                state: 状态,\n                                allclears: 全清,\n                            };\n\n                            //let url = pd(item, _大类链接);\n                            let url = item.url;\n                            /*if (大类处理) {\n                              url = 一级分类处理(url);\n                            }*/\n                            //log(url)\n                            items.push({\n                                title: this.setTitle(key.toString(), cate_temp[index], title),\n                                col_type: \"scroll_button\",\n                                url: $(\"hiker://empty#noLoading#\").lazyRule((params) => {\n                                        let new_cate = [];\n                                        params.clears.forEach((item) => {\n                                            clearMyVar(item);\n                                        });\n                                        params.allclears.forEach((item) => {\n                                            clearMyVar(item);\n                                        });\n                                        clearMyVar('cate_button');\n\n                                        params.cate_temp.forEach((cate, index) => {\n                                            new_cate.push(index === 0 ? params.key.toString() : \"0\");\n                                        });\n                                        putMyVar(\"head.cate\", JSON.stringify(new_cate));\n                                        if (params.json.constructor === Object) {\n                                            putMyVar(\"dt_\" + params.json.type, params.json.value);\n                                        } else {\n                                            putMyVar(params.state, params.json);\n                                        }\n                                        refreshPage(true);\n                                        return \"hiker://empty\";\n                                    },\n                                    params),\n                            });\n                        });\n                        items.push({\n                            col_type: \"blank_block\",\n                            extra: {\n                                id: MY_RULE.title + 'cate_line',\n                            }\n                        });\n                    } else {\n                        //小类\n                        sub_categories.forEach((item, key) => {\n                            var extrapos = false;\n                            /*if (item.includes('type=\"@extra\"')) {\n                              extrapos = true;\n                              //log('附加定位')\n                            }*/\n\n                            if (extrapos) {\n                                var title = pdfh(item, \"a&&Text\");\n                                if (typeof 排除 != \"undefined\" && 排除 != \"\") {\n                                    title = title.replace(new RegExp(排除, \"g\"), \"\");\n                                }\n                                var json = {\n                                    type: pdfh(item, \"a&&state\"),\n                                    value: pdfh(item, \"a&&value\"),\n                                };\n                            } else {\n                                //var title = pdfh(item, 分类标题);\n                                var title = item.title;\n                                if (typeof 排除 != \"undefined\" && 排除 != \"\") {\n                                    title = title.replace(new RegExp(排除, \"g\"), \"\");\n                                }\n\n                                var json = \"\";\n                                /*switch (true) {\n                                  case 分类链接.includes(\"@@@\"):\n                                    json = {\n                                      type: pdfh(item, 分类链接.split(\"@@@\")[0]),\n                                      value: pdfh(item, 分类链接.split(\"@@@\")[1]),\n                                    };\n                                    break;\n                                  case 分类链接.includes(\"@@\"):\n                                    json = {\n                                      type: 分类链接.split(\"@@\")[0],\n                                      value: pdfh(item, 分类链接.split(\"@@\")[1]),\n                                    };\n                                    break;\n                                  default:\n                                    json = item.url;\n                                    // json = pd(item, 分类链接);\n                                    break;\n                                }*/\n                                json = item.url;\n                                /*var json=分类链接.includes('@@@')?{\n                                      type:pdfh(item,分类链接.split('@@@')[0]),\n                                      value:pdfh(item,分类链接.split('@@@')[1]),\n                                  }:pd(item,分类链接);\n                                  json=分类链接.includes('@@')?{\n                                      type:分类链接.split('@@')[0],\n                                      value:pdfh(item,分类链接.split('@@')[1]),\n                                  }:pd(item,分类链接);*/\n                            }\n\n                            let params = {\n                                cate_temp: cate_temp,\n                                index: index,\n                                key: key,\n                                page: page,\n                                json: json,\n                                state: 状态,\n                                allclears: 全清,\n                            };\n                            cates.push({\n                                title: this.setTitle(key.toString(), cate_temp[index], title),\n                                url: $(\"hiker://empty\" + \"#noLoading#\").lazyRule((params) => {\n                                        params.allclears.forEach((item) => {\n                                            clearMyVar(item);\n                                        });\n                                        clearMyVar('cate_button');\n\n                                        params.cate_temp[params.index] = params.key.toString();\n                                        putMyVar(\"head.cate\", JSON.stringify(params.cate_temp));\n                                        if (params.json.constructor === Object) {\n                                            putMyVar(\"dt_\" + params.json.type, params.json.value);\n                                        } else {\n                                            putMyVar(params.state, params.json);\n                                        }\n                                        refreshPage();\n                                        return \"hiker://empty\";\n                                    },\n                                    params),\n                                col_type: \"scroll_button\",\n                                extra: {\n                                    cls: MY_RULE.title + 'cate_button',\n                                }\n                            });\n                        });\n                        cates.push({\n                            col_type: \"blank_block\",\n                            extra: {\n                                cls: MY_RULE.title + 'cate_button',\n                            }\n                        });\n                    }\n                });\n            }\n            if (fold === \"1\" || 折叠状态 == false) {\n                items = items.concat(cates);\n            }\n            if (fold === \"0\") {\n                storage0.putMyVar('cate_button', cates)\n            }\n            if (typeof setPreResult != 'undefined') {\n                items = d.concat(items);\n                //清空继承数组\n                d.length = 0;\n                setPreResult(items);\n            } else {\n                items.forEach(item => {\n                    d.push(item);\n                })\n            }\n        },\n    };\n    obj.预设(options);\n    return obj;\n}\n\nvar 状态 =\n    typeof 状态标记 != \"undefined\" && 状态标记 != \"\" ? 状态标记 : MY_RULE.url;\n\nlet dt_debug = false;\n\naddListener(\n    \"onClose\",\n    $.toString(() => {})\n);\n\nvar Create = {\n    nextPage: function() {\n        var result = false;\n        try {\n            var next = eval(下一页);\n            //log('n:'+next)\n            if (next == \"\") {\n                throw new Error('下一页链接为空')\n            }\n            result = true;\n            if (true_url == next) {\n                result = false;\n            }\n        } catch (e) {\n            //log(\"可能不存在下一页或者下一页定位有问题\");\n            log(\"错误信息:\" + e.message);\n        }\n        if ((next == \"\" || next == undefined) && page == 1) {\n            next = true_url;\n        } else {\n            //result=false;\n            next = getMyVar(状态);\n        }\n        //log('l'+true_url)\n        //log('n'+next)\n        if (page != 1) {\n            if (true_url == next && !result) {\n                result = false;\n            } else {\n                result = true;\n            }\n        }\n        return result;\n        //putMyVar(状态, next);\n    },\n    getBackImage: function(imgurl) {\n        var result = imgurl;\n        try {\n            result = /url(?:\\s+)?\\((.*?)\\)/g\n                .exec(imgurl)[1]\n                .replace(/('|\"|&quot;)/gm, \"\");\n        } catch {}\n        return result;\n    },\n    httpHandle: function(input) {\n        if (input.startsWith(\"http\")) {\n            return input;\n        } else if (input.startsWith(\"//\")) {\n            return \"https:\" + input;\n        } else if (input.startsWith(\"/\")) {\n            return MY_HOME + input;\n        }\n    },\n    imgHandle: function(item, rule) {\n        var img = \"\";\n        if (rule.img.startsWith(\"pd\")) {\n            img = eval(rule.img);\n        } else if (rule.backimg) {\n            img = pdfh(item, rule.img);\n            img = this.getBackImage(img);\n            img = this.httpHandle(img);\n        } else {\n            img = pdfh(item, rule.img);\n            if (!img.startsWith(\"http\")) {\n                img = pd(item, rule.img);\n                img = this.httpHandle(img);\n            }\n        }\n        return img + rule.ref;\n    },\n    urlHandle: function(item, rule) {\n        var href = \"\";\n        if (rule.url.startsWith(\"pd\")) {\n            href = eval(rule.url);\n        } else {\n            href = pd(item, rule.url);\n        }\n        href = rule.imt ? href + \"#immersiveTheme#\" : href;\n        return href;\n    },\n    setContent: function(item, input) {\n        let output = \"\";\n        if (input == undefined) {\n            return output;\n        }\n        if (input.startsWith(\"pd\")) {\n            output = eval(input);\n        } else {\n            output = pdfh(item, input);\n        }\n        return output;\n    },\n    refresh: function() {\n        addListener(\n            \"onRefresh\",\n            $.toString((u) => {\n                clearMyVar(\"yilist\");\n                //var p = storage0.getMyVar('spage', '');\n                //putMyVar(u, p);\n            }, 状态)\n        );\n    },\n    getBooleanValue: function(value, defaultValue) {\n        return value !== undefined ? Boolean(value) : (defaultValue !== undefined ? defaultValue : true);\n    },\n    debuglog: function(i, item, rule, obj) {\n        log('----------' + (i + 1) + ':调试开始----------');\n        if (item.constructor == Object) {\n            item = JSON.stringify(item);\n        }\n        log('item内容:\\r\\n' + item + '\\r\\n' +\n            `\\n\\ttitle定位:  ${rule.title}  ---> 结果:  ${obj.title}` +\n            `\\n\\tdesc定位:  ${rule.desc}  ---> 结果:  ${obj.desc}` +\n            `\\n\\timg定位:  ${rule.img}  ---> 结果:  ${obj.img}` +\n            (rule.content != undefined ? `\\n\\tcontent定位:  ${rule.content}  ---> 结果:  ${obj.content}` : '') +\n            `\\n\\turl定位:  ${rule.url}  ---> 结果:  ${obj.url}`\n        );\n        log('----------' + (i + 1) + ':调试结束----------');\n    },\n    jsonList: function(arr, json, rule) {\n        if (json.constructor != Object) {\n            try {\n                json = JSON.parse(json);\n            } catch {}\n        }\n        if (json[rule.list] == undefined) {\n            arr.push({\n                title: '““””<font color=\"grey\"><small>无内容</small></font>',\n                url: \"hiker://empty\",\n                col_type: \"text_center_1\",\n                extra: {},\n            });\n            return;\n        }\n        var debug = this.getBooleanValue(rule.debug, false);\n        var empty = this.getBooleanValue(rule.empty);\n        if (debug) {\n            log('定位列表:' + rule.list);\n        }\n        json[rule.list].forEach((item, i) => {\n            var title = eval(rule.title);\n            var desc = eval(rule.desc);\n            var content = eval(rule.content);\n            var img = eval(rule.img) + rule.ref;\n            var href = eval(rule.url);\n            var url = rule.imt ? href + \"#immersiveTheme#\" : href;\n            var lazy = rule.lazy ? rule.lazy : \"\";\n\n            var dd = {\n                title: title,\n                desc: desc,\n                content: content,\n                pic_url: img,\n                url: (empty ? \"hiker://empty##\" : '') + url,\n                col_type: rule.col_type,\n                extra: {\n                    img: img,\n                },\n            };\n\n            if (debug) {\n                var rx = {\n                    title,\n                    desc,\n                    img,\n                    content,\n                    url\n                };\n                this.debuglog(i, item, rule, rx);\n            }\n\n            if (lazy != \"\") {\n                dd[\"url\"] = href + lazy;\n            }\n            arr.push(dd);\n        });\n    },\n    ruleList: function(arr, html, rule) {\n        var list = pdfa(html,\n            rule.list);\n        var debug = this.getBooleanValue(rule.debug,\n            false);\n        var empty = this.getBooleanValue(rule.empty);\n        if (debug) {\n            log('定位列表:' + rule.list);\n        }\n        list.forEach((item, i) => {\n            var title = this.setContent(item, rule.title);\n            var desc = this.setContent(item, rule.desc);\n            var img = this.imgHandle(item, rule);\n            var url = this.urlHandle(item, rule);\n            var content = this.setContent(item, rule.content);\n\n            if (debug) {\n                var rx = {\n                    title,\n                    desc,\n                    img,\n                    content,\n                    url\n                };\n                this.debuglog(i, item, rule, rx);\n            }\n\n            var lazy = rule.lazy ? rule.lazy : \"\";\n            var dd = {\n                title: title,\n                desc: desc,\n                pic_url: img,\n                url: (empty ? \"hiker://empty##\" : '') + url,\n                content: content,\n                col_type: rule.col_type,\n                extra: {\n                    img: img,\n                },\n            };\n            if (lazy != \"\") {\n                dd[\"url\"] = url + lazy;\n            }\n            arr.push(dd);\n        });\n    },\n    List: function(arr, html, rule, param) {\n        param = param ? param : {};\n        var auto = param.auto ? param.auto : false;\n        var show = param.show ? param.show : false;\n        if (page == 1) {\n            //this.spage.set(true_url);\n        }\n        this.refresh();\n        var debug = this.getBooleanValue(rule.debug, false);\n        var empty = this.getBooleanValue(rule.empty);\n        var list = pdfa(html, rule.list);\n        if (debug) {\n            log('定位列表:' + rule.list);\n        }\n        //log(this.nextPage())\n        if ((storage0.getMyVar('yi_isnext', 't') == 't' && list.length > 0) || page == 1) {\n            list.forEach((item, i) => {\n                deleteItem(\"pagenum\");\n                deleteItem(\"pageline\");\n                var id = \"\";\n                var cls = \"\";\n                var title = this.setContent(item, rule.title);\n                var desc = this.setContent(item, rule.desc);\n                var desc1 = this.setContent(item, rule.desc1);\n                var img = this.imgHandle(item, rule);\n                var url = this.urlHandle(item, rule);\n                var content = this.setContent(item, rule.content);\n\n                if (debug) {\n                    var rx = {\n                        title,\n                        desc,\n                        img,\n                        content,\n                        url\n                    };\n                    this.debuglog(i, item, rule, rx);\n                }\n\n                if (i == list.length - 1) {\n                    id = \"lastid_\" + page;\n                    cls = \"lastmark\";\n                }\n                d.push({\n                    title: title,\n                    desc: desc + '\\t\\t\\t' + desc1,\n                    pic_url: img,\n                    url: (empty ? \"hiker://empty##\" : '') + url,\n                    content: content,\n                    col_type: rule.col_type,\n                    extra: {\n                        img: img,\n                        id: id,\n                        cls: cls,\n                    },\n                });\n                if (i == list.length - 1 && show) {\n                    d.push({\n                        col_type: \"line\",\n                        extra: {\n                            id: \"pageline\",\n                        },\n                    });\n\n                    d.push({\n                        title: \"““””<small>加载中...</small>\",\n                        url: \"hiker://empty\",\n                        col_type: \"text_center_1\",\n                        extra: {\n                            id: \"pagenum\",\n                        },\n                    });\n                }\n            });\n        } else {\n            updateItem(\"pagenum\", {\n                title: '““””<font color=\"grey\"><small>到底了</small></font>',\n                url: \"hiker://empty\",\n                col_type: \"text_center_1\",\n                extra: {\n                    id: \"last\",\n                },\n            });\n        }\n        if (list.length == 0 && page == 1) {\n            d.push({\n                col_type: \"line\",\n            });\n            d.push({\n                title: '““””<font color=\"grey\"><small>无内容</small></font>',\n                url: \"hiker://empty\",\n                col_type: \"text_center_1\",\n                extra: {},\n            });\n        }\n        if (this.nextPage()) {\n            //log('t');\n            storage0.putMyVar('yi_isnext', 't');\n        } else {\n            //log('f');\n            storage0.putMyVar('yi_isnext', 'f');\n        }\n        if (auto) {\n            //createNextPage();\n            autoPage();\n        }\n    },\n};\n\nvar extMethod = {\n    ToParams: function() {\n        var json = arguments[0];\n        return Object.keys(json)\n            .map((key) => key + \"=\" + json[key])\n            .join(\"&\");\n    },\n    urlParse: function(u) {\n        var dict = {};\n        dict.Source = u;\n        let params = (url) => {\n            let queryParams = {};\n            let reg = /([^?=&]+)=([^?=&]+)/g;\n            url.replace(reg, function() {\n                queryParams[arguments[1]] = arguments[2];\n            });\n            return queryParams;\n        };\n        var javaUrl = JavaImporter(java.net.URL);\n        with(javaUrl) {\n            var url = new URL(u);\n            dict.Protocol = url.getProtocol();\n            dict.Host = url.getHost();\n            dict.Port = url.getPort();\n            dict.File = url.getFile();\n            dict.Path = url.getPath();\n            dict.Ref = url.getRef();\n            dict.Hosts = `${dict.Protocol}://${url.getHost()}`;\n        }\n        dict.Params = params(u);\n        return dict;\n    },\n    isEqual: function(x, y) {\n        const ok = Object.keys,\n            tx = typeof x,\n            ty = typeof y;\n        return x && y && tx === \"object\" && tx === ty ?\n            ok(x).length === ok(y).length &&\n            ok(x).every((key) => this.isEqual(x[key], y[key])) : x === y;\n    },\n    findDifferentIndex: function(str1, str2) {\n        const diffChars = [];\n        for (let i = 0; i < str2.length; i++) {\n            if (str1[i] !== str2[i]) {\n                diffChars.push({\n                    index: i,\n                    s1: str1[i],\n                    s2: str2[i],\n                });\n            }\n        }\n        return diffChars;\n    },\n    replaceCharAt: function(str, index, replacement) {\n        if (index < 0 || index >= str.length) {\n            return str;\n        }\n        //log(index)\n        const arr = str.split(\"\");\n        arr[index] = replacement;\n        return arr.join(\"\");\n    },\n    getObjectKeysDiff: function(obj1, obj2) {\n        const differentKeys = [];\n        for (let key in obj1) {\n            if (!obj2.hasOwnProperty(key) || obj1[key] !== obj2[key]) {\n                differentKeys.push(key);\n            }\n        }\n        for (let key in obj2) {\n            if (!obj1.hasOwnProperty(key)) {\n                differentKeys.push(key);\n            }\n        }\n        return differentKeys;\n    },\n    getNextUrl: function(source, target, params) {\n        var u1 = this.urlParse(source);\n        var u2 = this.urlParse(target);\n        var pa = undefined;\n        if (typeof params == \"object\") {\n            pa = params.hasOwnProperty(\"特征\") ? params.特征 : undefined;\n        }\n        var nexturl = source;\n        var ca = Object.keys(u2.Params).length == 0 ? \"\" : \"?\";\n        if (pa != undefined) {\n            var rs = String(u2.Path).replace(new RegExp(pa), \"$1fypage\");\n            nexturl = u2.Hosts + rs + ca + this.ToParams(u2.Params);\n        } else {\n            if (this.isEqual(u1.Params, u2.Params)) {\n                if (dt_debug) {\n                    log(u1.Path);\n                    log(u2.Path);\n                }\n                var df = this.findDifferentIndex(String(u1.Path), String(u2.Path));\n                if (dt_debug) {\n                    log(df);\n                }\n                if (df.length == 1) {\n                    var re = df[0].index;\n                } else {\n                    var f = df.filter((x) => /\\d+/.test(x.s2));\n                    var re = f[0].index;\n                }\n                var eq = this.replaceCharAt(String(u2.Path), re, \"fypage\");\n                nexturl = u2.Hosts + eq + ca + this.ToParams(u2.Params);\n            } else {\n                var ep = this.getObjectKeysDiff(u1.Params, u2.Params)\n                if (ep.length == 1) {\n                    u1.Params[ep[0]] = 'fypage'\n                } else {\n                    log(ep);\n                }\n                var eq = String(u1.Path).replace(/\\d+/, \"fypage\");\n                nexturl = u1.Hosts + eq + ca + this.ToParams(u1.Params);\n            }\n        }\n        //log('next:'+nexturl)\n        return nexturl;\n    },\n};\n\nfunction getTruelink(mark, url, page) {\n    var p = getMyVar(mark, url).replace(\"fypage\", page);\n    if (page == 1) {\n        return getMyVar(\"yi_firstpage\", p);\n    } else if (p != \"\") {\n        return p;\n    } else {\n        return url;\n    }\n}\n//构建\nfunction createNextPage() {\n    let startnum = 1;\n    var obj = arguments[0];\n    if (true_url != getMyVar(\"yi_pageurl\", \"\")) {\n        clearMyVar(\"yi_pageurl\");\n    }\n    if (page == startnum && getMyVar(\"yi_pageurl\") == \"\") {\n        putMyVar(\"yi_firstpage\", true_url);\n        try {\n            var next = eval(下一页);\n            //log(\"next\");\n            //log(next);\n        } catch {\n            log(\"可能不存在下一页或者下一页定位有问题\");\n            next = \"\";\n        }\n        if (next != \"\") {\n            var nxurl = extMethod.getNextUrl(true_url, next, obj);\n            //log(\"nxurl:\" + nxurl);\n            putMyVar(状态, nxurl);\n            putMyVar(\"yi_pageurl\", nxurl);\n        }\n    }\n}\n\nfunction autoPage() {\n    if (page == 1) {\n        putMyVar(\"yi_firstpage\", true_url);\n    }\n    try {\n        var next = eval(下一页);\n        //log(\"next\");\n        //log('next:'+next);\n    } catch {\n        log(\"可能不存在下一页或者下一页定位有问题\");\n        next = \"\";\n    }\n    if (next != \"\") {\n        putMyVar(状态, next);\n    }\n}"},{"col_type":"movie_3","name":"解析","path":"lazy","rule":"var lazy = $('').lazyRule((MY_HOME,rule) => { \n        return \"hiker://page/aliyun?rule=云盘君.简&page=fypage&realurl=\" + encodeURIComponent(input);\n}, MY_HOME, MY_RULE.title)"},{"col_type":"movie_3","name":"下载","path":"down","rule":"js:\nvar d = [];\nMY_URL = MY_URL.replace('hiker://empty##', '');\nvar html = request(MY_URL);\n\nlet arr = pdfa(html, 'body&&.list-group&&li');\nfor (let it of arr) {\n    let t = pdfh(it, \"Text\");\n    if (!t || t == \"\") {\n        continue;\n    }\n    d.push({\n        title: '<middle><font color=#FFA500>'+t+'</font></middle>',\n        url: \"\",\n        col_type: \"rich_text\"\n    });\n}\n\nd.push({\n       title:  '““””<middle><font color=red>网盘下载</font></middle>',\n       url: 'hiker://empty',\n       col_type: 'text_center_1',\n       extra:{lineVisible:false}\n  });\n\nvar list = pdfa(html, '.col-md-5,1&&a');\nlist.forEach(x => {   \n    d.push({\n       title: pdfh(x, 'Text'),\n       url: pd(x, 'a&&href'),\n       col_type: 'text_3',\n  });\n})\n\nd.push({\n       title:  '““””<middle><font color=yellow>提取密码：点击复制</font></middle>',\n       url: 'hiker://empty',\n       col_type: 'text_center_1',\n       extra:{lineVisible:false}\n  });\n\nvar list1 = pdfa(html, 'body&&.col-md-5,1&&.list-group&&li').slice(-3);\nlist1.forEach(x => {   \n    d.push({\n       title: pdfh(x, 'Text').replace('密码：','').replace(/\\./g,''),\n       url: 'copy://' + pdfh(x, 'Text').replace(/.*?：(.*)/,'$1'),\n       col_type: 'text_3',\n  });\n})\n\nsetResult(d)"}],"title":"异星空间","author":"R","version":20231021,"type":"video","url":"hiker://empty##https://www.yxssp.com/page/fypage","col_type":"pic_1_card","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nvar d = [];\naddListener(\"onClose\", $.toString(() => {\n    let keys = listMyVarKeys();\n    for (let it of keys) {\n        clearMyVar(it);\n    }\n}));\nvar getRangeColors = function() {       \n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);     \n}\nconst 下一页 = \"pd(html, 'body&&.page-nav&&a,-1&&href')\";\nconst page = MY_PAGE;\neval(JSON.parse(request('hiker://page/yi')).rule)\n\nvar 定位信息 = [{\n    大类定位: 'body&&.menu-item-first,0:1||.menu-item-type-taxonomy,68:n',\n    小类: 'body&&a:not(:matches(友情|资讯|APP|专题|社群|热搜|留言|福利))',\n    链接处理: (u) => {\n        let url = u.replace(/type(\\/\\d+)\\.html/, 'show$1-----------.html');\n        return url\n    }\n},{\n    一级定位: 'body&&.sub-menu:has(li:nth-child(n+2)),0:3',\n}]\n\n\nMY_URL = MY_URL.replace('hiker://empty##', '')\nlet true_url = getTruelink(MY_RULE.url, MY_URL, page);\nMY_URL=true_url;\nlog(true_url)\n\nvar html = request(true_url)\nconst dc = dynamicClass({\n    分类颜色: getRangeColors()\n});\ndc.开启折叠(false)\ndc.开启搜索()\ndc.创建动态分类(定位信息)\n\n\nvar parseRule = {\n    list: 'body&&.td_module_4:not(:matches(【得物】|「置顶」))', //统一item\n    title: 'a&&title',\n    desc: '.td-post-author-name&&Text',\n    desc1: 'time&&Text',\n    img: 'img||a&&src||data-original',\n    url: 'a&&href',\n    ref: '@Referer=',\n    imt: false,\n    //backimg: true,\n}\n\nCreate.List(d, html, parseRule);\nautoPage();\n\n\nsetResult(d)","searchFind":"js:\nvar d = [];\nvar html = getResCode();\nvar list = pdfa(html, 'body&&.td_module_4');\nlist.forEach(x => {   \n    d.push({\n       title: pdfh(x, 'a&&title'),\n       desc: pdfh(x,'time&&datetime'),\n       img: pd(x,'img&&src'),\n       url: pd(x, 'a&&href'),\n  });\n})\nsetResult(d)","search_url":"/page/fypage?s=**","group":"0️⃣常用","detail_col_type":"movie_1","detail_find_rule":"js:\nvar d = [];\nMY_URL = MY_URL.replace('hiker://empty##', '');\nvar html = request(MY_URL);\n\nvar title = pdfh(html, '.entry-title&&Text');\nvar desc = pdfh(html, 'body&&.td-category&&Text');\nvar url = pdfh(html, 'body&&.downlink&&a&&href');\nif (title !== null) {\n    d.push({\n        title: '““””<middle><font color=#FFA500>' + title + '</font></middle>',\n        desc: desc + '\\t\\t\\t\\t\\t\\t点击标题进入下载页面',\n        url: $(url).rule(() => {\n            require('hiker://page/down')\n        }),\n        col_type: 'text_1',\n        extra: {\n            lineVisible: false\n        }\n    })\n}\n\nvar img = pd(html, 'body&&.td-post-content&&img,-1&&src');\nif (img !== null) {\n    d.push({\n        img: img,\n        url: 'hiker://empty',\n        col_type: 'pic_1_full',\n    });\n}\n\nlet arr = pdfa(html, 'body&&.td-post-content&&p:not(:has(a))');\nfor (let it of arr) {\n    let t = pdfh(it, \"Text\");\n    if (!t || t == \"\") {\n        continue;\n    }\n    d.push({\n        title: '<middle><font color=#008B8B>' + t + '</font></middle>',\n        url: \"\",\n        col_type: \"rich_text\"\n    });\n}\n\n\n\nsetResult(d)","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"一级\",\"path\":\"yi\",\"rule\":\"js:\\n/*\\nby α(zetalpha)\\n一级封装\\n动态分类 列表创建 自动下一页\\nver 20231017 1.0\\n*/\\n\\n//随机颜色\\nvar getRangeColors = function() {\\n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);\\n}\\n\\n//动态分类\\nfunction dynamicClass(options) {\\n    const obj = {\\n        //默认值\\n        layout: \\\"undefined\\\",\\n        html: \\\"empty\\\",\\n        page: 0,\\n        分类颜色: \\\"#FA7298\\\",\\n        折叠: \\\"““””<b>\\\" + \\\"∧\\\".fontcolor(\\\"#1aad19\\\") + \\\"</b>\\\",\\n        展开: \\\"““””<b>\\\" + \\\"∨\\\".fontcolor(\\\"#FF0000\\\") + \\\"</b>\\\",\\n        open: true,\\n        state: MY_RULE.url,\\n        search: false,\\n        clears: [],\\n        clearall: [\\\"yi_firstpage\\\"],\\n        debug: false,\\n\\n        预设(param) {\\n            if (param == undefined) {\\n                param = [];\\n            }\\n            Object.keys(param).forEach((property) => {\\n                // 对每个属性名执行操作\\n                const value = param[property]; // 获取属性值\\n                // 在这里执行您的操作\\n                this[property] = value;\\n                if (this.debug) {\\n                    console.log(property + \\\":\\\" + value);\\n                }\\n            });\\n        },\\n        evalJSRule(item,\\n            jsRule) {\\n            let rule = jsRule.replace(\\\"@js:\\\",\\n                \\\"\\\");\\n            rule = rule.trim();\\n            //log($.stringify(rule))\\n            let input = item;\\n            if (rule.startsWith(\\\"(\\\")) {\\n                eval(\\\"result = \\\" + rule);\\n            } else {\\n                /**\\n                 * 还原成 $.toString(...) 的最终结果，达到最终处理方式跟上面的 if 一致的目的\\n                 */\\n                eval(\\\"result = \\\" + \\\"(() => {\\\" + rule + \\\"})()\\\");\\n            }\\n            return result || \\\"\\\";\\n        },\\n        getTitle(src, category) {\\n            let title = \\\"\\\";\\n            let titleRule = category || \\\"a&&Text\\\";\\n            if (titleRule.startsWith(\\\"@js:\\\")) {\\n                title = this.evalJSRule(src, titleRule);\\n            } else {\\n                title = parseDomForHtml(src, titleRule);\\n            }\\n            return title || \\\"\\\";\\n        },\\n        getUrl(src, category) {\\n            let url = \\\"\\\";\\n            let urlRule = category.链接 || \\\"a&&href\\\";\\n            if (urlRule.startsWith(\\\"@js:\\\")) {\\n                url = this.evalJSRule(src, urlRule);\\n            } else {\\n                url = pd(src, urlRule);\\n            }\\n            if (typeof category.链接处理 == \\\"function\\\") {\\n                url = category.链接处理(url);\\n            }\\n            return url || \\\"\\\";\\n        },\\n        isNull(param) {\\n            if (param == null) {\\n                return this;\\n            }\\n            return false;\\n        },\\n        isBoolean(variable) {\\n            if (typeof variable !== \\\"boolean\\\") {\\n                throw new Error(\\\"开启折叠请传入布尔值\\\");\\n            }\\n        },\\n        清除(list) {\\n            if (this.isNull(list)) {\\n                return this;\\n            }\\n            if (list.constructor == String) {\\n                throw new Error(\\\"清除报错:请传列表\\\");\\n            }\\n            this.clears = list;\\n            return this;\\n        },\\n        全清(list) {\\n            if (this.isNull(list)) {\\n                return this;\\n            }\\n            var c = this.clearall;\\n            list = c.concat(list);\\n            this.clearall = list;\\n            return this;\\n        },\\n        源码(input) {\\n            this.html = input;\\n            return this;\\n        },\\n        界面(input) {\\n            this.layout = input;\\n            return this;\\n        },\\n        页码(input) {\\n            this.page = input;\\n            return this;\\n        },\\n        状态(input) {\\n            this.state = input;\\n            return this;\\n        },\\n        开启搜索(input) {\\n            if (input == undefined) {\\n                input = true;\\n            }\\n            this.search = input;\\n            return this;\\n        },\\n        开启折叠(input) {\\n            if (input == undefined) {\\n                input = true;\\n            }\\n            this.isBoolean(input);\\n            this.open = input;\\n            return this;\\n        },\\n        setTitle(k, i, t) {\\n            return k == i ? \\\"““””\\\" + t.fontcolor(this.分类颜色) : t;\\n        },\\n        action(obj) {\\n            return [{\\n                title: \\\"清除状态\\\",\\n                js: $.toString((obj) => {\\n                    log(obj);\\n                    clearMyVar(obj.state);\\n                    clearMyVar(\\\"head.cate\\\");\\n                    clearMyVar('cate_button');\\n                    obj.all.forEach((item) => {\\n                        clearMyVar(item);\\n                    });\\n                    obj.cl.forEach((item) => {\\n                        clearMyVar(item);\\n                    });\\n                    refreshPage();\\n                }, obj),\\n            }, ];\\n        },\\n        checkParam() {\\n            var obj = {};\\n            if (this.page == 0 && typeof page == \\\"undefined\\\") {\\n                throw new Error(\\\"请传入页码\\\");\\n            } else {\\n                if (typeof page == \\\"undefined\\\") {\\n                    obj[\\\"页码\\\"] = this.page;\\n                } else {\\n                    obj[\\\"页码\\\"] = page;\\n                }\\n            }\\n            if (this.html == \\\"empty\\\" && typeof html == \\\"undefined\\\") {\\n                throw new Error(\\\"请传入源码\\\");\\n            } else {\\n                if (typeof html == \\\"undefined\\\") {\\n                    obj[\\\"源码\\\"] = this.html;\\n                } else {\\n                    obj[\\\"源码\\\"] = html;\\n                }\\n            }\\n            if (this.layout == \\\"undefined\\\" && typeof d == \\\"undefined\\\") {\\n                throw new Error(\\\"请传入界面\\\");\\n            } else {\\n                if (typeof d == \\\"undefined\\\") {\\n                    obj[\\\"界面\\\"] = this.layout;\\n                } else {\\n                    obj[\\\"界面\\\"] = d;\\n                }\\n            }\\n            return obj;\\n        },\\n        创建动态分类(ruleObj) {\\n            let items = [];\\n            let cates = [];\\n            if (ruleObj == undefined) {\\n                ruleObj = [];\\n            }\\n            //初始化变量开始\\n            const param = this.checkParam();\\n            const page = param.页码;\\n            const html = param.源码;\\n            const d = param.界面;\\n            const 状态 = this.state;\\n            const search = this.search;\\n            const empty = \\\"hiker://empty\\\";\\n            const 折叠状态 = this.open;\\n            var 展开 = this.展开;\\n            var 折叠 = this.折叠;\\n            var 全清 = this.clearall;\\n            var 清除 = this.clears;\\n            //初始化变量结束\\n            let init_cate = new Array(20).fill(\\\"0\\\");\\n            const fold = getMyVar(MY_RULE.group, \\\"0\\\");\\n            const cate_temp = JSON.parse(\\n                getMyVar(\\\"head.cate\\\", JSON.stringify(init_cate))\\n            );\\n            if (search && page == 1) {\\n                items.push({\\n                    title: \\\"\\\",\\n                    url: \\\"'hiker://search?rule=\\\" + MY_RULE.title + \\\"&s='+input\\\",\\n                    desc: \\\"搜索关键词\\\",\\n                    col_type: \\\"input\\\",\\n                    extra: {\\n                        defaultValue: getMyVar(\\\"keyword\\\", \\\"\\\"),\\n                        onChange: $.toString(() => {\\n                            putMyVar(\\\"keyword\\\", input);\\n                        }),\\n                    },\\n                });\\n            }\\n            const categories = [];\\n            ruleObj.forEach((x) => {\\n                var list = [];\\n                //log(x)\\n                if (x.json != undefined) {\\n                    x.json.map(k => {\\n                        categories.push(JSON.stringify(k).replace(/^\\\\[|\\\\]$/g, ''))\\n                    })\\n                    //categories.push(x.json)\\n                }\\n                if (x.一级定位) {\\n                    if (x.一级定位.startsWith(\\\"@js:\\\")) {\\n                        list = this.evalJSRule(html, x.一级定位);\\n                    } else {\\n                        list = pdfa(html, x.一级定位);\\n                    }\\n                }\\n                if (x.大类定位) {\\n                    if (x.大类定位.startsWith(\\\"@js:\\\")) {\\n                        list = this.evalJSRule(html, x.大类定位);\\n                    } else {\\n                        list = [pdfa(html, x.大类定位).join('\\\\n')];\\n                    }\\n                }\\n                //--额外处理--\\n                if (('增加' in x)) {\\n                    if (x.增加.constructor == String) {\\n                        x.增加 = eval(x.增加);\\n                    }\\n                    slist = x.增加.concat(slist);\\n                }\\n                if (('补充' in x)) {\\n                    if (x.补充.constructor == String) {\\n                        x.补充 = eval(x.补充);\\n                    }\\n                    slist = slist.concat(x.补充);\\n                }\\n                //--额外处理--\\n                var 一级 = list.map((s) => {\\n                    var slist = [];\\n                    if (!(\\\"小类\\\" in x)) {\\n                        x.小类 = \\\"body&&a:not(:matches(首页)):not(a:not([href]))\\\";\\n                    }\\n                    if (x.小类.startsWith(\\\"@js:\\\")) {\\n                        slist = this.evalJSRule(s, x.小类);\\n                    } else {\\n                        slist = pdfa(s, x.小类);\\n                    }\\n                    var 定位 = slist.map((item) => {\\n                        var title = this.getTitle(item, x.标题);\\n                        var url = this.getUrl(item, x);\\n                        var obj = {\\n                            title: title,\\n                            url: url\\n                        };\\n                        return JSON.stringify(obj);\\n                    });\\n                    return 定位;\\n                });\\n                //log(一级)\\n                //log(一级.length)\\n                if (一级.length == 1) {\\n                    categories.push(一级.join(\\\"\\\\n\\\"));\\n                } else {\\n                    一级.forEach((item) => {\\n                        categories.push(item.join(\\\",\\\"));\\n                    });\\n                }\\n                //log(categories)\\n            });\\n            if (折叠状态) {\\n                if (page == 1) {\\n                    items.push({\\n                        title: fold === \\\"1\\\" ? 折叠 : 展开,\\n                        url: $(\\\"#noLoading#\\\").lazyRule(\\n                            (title, fold, u, all, exps) => {\\n                                var fold = getMyVar(MY_RULE.group, fold);\\n\\n                                var [展开, 折叠] = exps;\\n\\n                                if (fold == 1) {\\n                                    var cx = findItemsByCls(title + 'cate_button');\\n                                    storage0.putMyVar('cate_button', cx);\\n                                    deleteItemByCls(title + 'cate_button');\\n\\n                                } else {\\n                                    var cx = storage0.getMyVar('cate_button', []).map(x => {\\n                                        x['col_type'] = x['col_type'] ? x['col_type'] : x['type'];\\n                                        return x;\\n                                    });\\n                                    addItemAfter(title + 'cate_line', cx)\\n                                }\\n\\n                                /*all.forEach((item) => {\\n                                  clearMyVar(item);\\n                                });*/\\n                                updateItem(title + 'cate_exp', {\\n                                    title: fold == 1 ? 展开 : 折叠,\\n                                })\\n\\n                                putMyVar(MY_RULE.group, fold === \\\"1\\\" ? \\\"0\\\" : \\\"1\\\");\\n\\n                                //refreshPage(false);\\n                                return \\\"hiker://empty\\\";\\n                            },\\n                            MY_RULE.title,\\n                            fold,\\n                            状态,\\n                            全清, [展开,\\n                                折叠\\n                            ],\\n                        ),\\n                        col_type: \\\"scroll_button\\\",\\n                        extra: {\\n                            id: MY_RULE.title + 'cate_exp',\\n                            longClick: this.action({\\n                                state: 状态,\\n                                all: 全清,\\n                                cl: 清除,\\n                            }),\\n                        },\\n                    });\\n                }\\n            }\\n            if (page == 1) {\\n                categories.forEach((category, index) => {\\n                    //log(category)\\n                    let sub_categories = [];\\n                    /*if (小类定位.includes(\\\";\\\")) {\\n                      sub_categories = pdfa(category, 小类定位.split(\\\";\\\")[0]);\\n                      if (sub_categories.length == 0) {\\n                        sub_categories = pdfa(category, 小类定位.split(\\\";\\\")[1]);\\n                      }\\n                    } else {*/\\n                    //log(index)\\n                    sub_categories = JSON.parse(`[${category}]`);\\n                    //log(sub_categories)\\n                    // sub_categories = pdfa(category, 小类定位);\\n                    //}\\n                    if (index === 0) {\\n                        //大类\\n                        sub_categories.forEach((item, key) => {\\n\\n                            //let title = pdfh(item, _大类标题);\\n                            let title = item.title;\\n\\n                            if (typeof 排除 != \\\"undefined\\\" && 排除 != \\\"\\\") {\\n                                title = title.replace(newRegExp(排除, \\\"g\\\"), \\\"\\\");\\n                            }\\n                            let json = ''\\n                            json = item.url;\\n\\n                            let params = {\\n                                cate_temp: cate_temp,\\n                                key: key,\\n                                page: page,\\n                                clears: 清除,\\n                                json: json,\\n                                state: 状态,\\n                                allclears: 全清,\\n                            };\\n\\n                            //let url = pd(item, _大类链接);\\n                            let url = item.url;\\n                            /*if (大类处理) {\\n                              url = 一级分类处理(url);\\n                            }*/\\n                            //log(url)\\n                            items.push({\\n                                title: this.setTitle(key.toString(), cate_temp[index], title),\\n                                col_type: \\\"scroll_button\\\",\\n                                url: $(\\\"hiker://empty#noLoading#\\\").lazyRule((params) => {\\n                                        let new_cate = [];\\n                                        params.clears.forEach((item) => {\\n                                            clearMyVar(item);\\n                                        });\\n                                        params.allclears.forEach((item) => {\\n                                            clearMyVar(item);\\n                                        });\\n                                        clearMyVar('cate_button');\\n\\n                                        params.cate_temp.forEach((cate, index) => {\\n                                            new_cate.push(index === 0 ? params.key.toString() : \\\"0\\\");\\n                                        });\\n                                        putMyVar(\\\"head.cate\\\", JSON.stringify(new_cate));\\n                                        if (params.json.constructor === Object) {\\n                                            putMyVar(\\\"dt_\\\" + params.json.type, params.json.value);\\n                                        } else {\\n                                            putMyVar(params.state, params.json);\\n                                        }\\n                                        refreshPage(true);\\n                                        return \\\"hiker://empty\\\";\\n                                    },\\n                                    params),\\n                            });\\n                        });\\n                        items.push({\\n                            col_type: \\\"blank_block\\\",\\n                            extra: {\\n                                id: MY_RULE.title + 'cate_line',\\n                            }\\n                        });\\n                    } else {\\n                        //小类\\n                        sub_categories.forEach((item, key) => {\\n                            var extrapos = false;\\n                            /*if (item.includes('type=\\\"@extra\\\"')) {\\n                              extrapos = true;\\n                              //log('附加定位')\\n                            }*/\\n\\n                            if (extrapos) {\\n                                var title = pdfh(item, \\\"a&&Text\\\");\\n                                if (typeof 排除 != \\\"undefined\\\" && 排除 != \\\"\\\") {\\n                                    title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                                }\\n                                var json = {\\n                                    type: pdfh(item, \\\"a&&state\\\"),\\n                                    value: pdfh(item, \\\"a&&value\\\"),\\n                                };\\n                            } else {\\n                                //var title = pdfh(item, 分类标题);\\n                                var title = item.title;\\n                                if (typeof 排除 != \\\"undefined\\\" && 排除 != \\\"\\\") {\\n                                    title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                                }\\n\\n                                var json = \\\"\\\";\\n                                /*switch (true) {\\n                                  case 分类链接.includes(\\\"@@@\\\"):\\n                                    json = {\\n                                      type: pdfh(item, 分类链接.split(\\\"@@@\\\")[0]),\\n                                      value: pdfh(item, 分类链接.split(\\\"@@@\\\")[1]),\\n                                    };\\n                                    break;\\n                                  case 分类链接.includes(\\\"@@\\\"):\\n                                    json = {\\n                                      type: 分类链接.split(\\\"@@\\\")[0],\\n                                      value: pdfh(item, 分类链接.split(\\\"@@\\\")[1]),\\n                                    };\\n                                    break;\\n                                  default:\\n                                    json = item.url;\\n                                    // json = pd(item, 分类链接);\\n                                    break;\\n                                }*/\\n                                json = item.url;\\n                                /*var json=分类链接.includes('@@@')?{\\n                                      type:pdfh(item,分类链接.split('@@@')[0]),\\n                                      value:pdfh(item,分类链接.split('@@@')[1]),\\n                                  }:pd(item,分类链接);\\n                                  json=分类链接.includes('@@')?{\\n                                      type:分类链接.split('@@')[0],\\n                                      value:pdfh(item,分类链接.split('@@')[1]),\\n                                  }:pd(item,分类链接);*/\\n                            }\\n\\n                            let params = {\\n                                cate_temp: cate_temp,\\n                                index: index,\\n                                key: key,\\n                                page: page,\\n                                json: json,\\n                                state: 状态,\\n                                allclears: 全清,\\n                            };\\n                            cates.push({\\n                                title: this.setTitle(key.toString(), cate_temp[index], title),\\n                                url: $(\\\"hiker://empty\\\" + \\\"#noLoading#\\\").lazyRule((params) => {\\n                                        params.allclears.forEach((item) => {\\n                                            clearMyVar(item);\\n                                        });\\n                                        clearMyVar('cate_button');\\n\\n                                        params.cate_temp[params.index] = params.key.toString();\\n                                        putMyVar(\\\"head.cate\\\", JSON.stringify(params.cate_temp));\\n                                        if (params.json.constructor === Object) {\\n                                            putMyVar(\\\"dt_\\\" + params.json.type, params.json.value);\\n                                        } else {\\n                                            putMyVar(params.state, params.json);\\n                                        }\\n                                        refreshPage();\\n                                        return \\\"hiker://empty\\\";\\n                                    },\\n                                    params),\\n                                col_type: \\\"scroll_button\\\",\\n                                extra: {\\n                                    cls: MY_RULE.title + 'cate_button',\\n                                }\\n                            });\\n                        });\\n                        cates.push({\\n                            col_type: \\\"blank_block\\\",\\n                            extra: {\\n                                cls: MY_RULE.title + 'cate_button',\\n                            }\\n                        });\\n                    }\\n                });\\n            }\\n            if (fold === \\\"1\\\" || 折叠状态 == false) {\\n                items = items.concat(cates);\\n            }\\n            if (fold === \\\"0\\\") {\\n                storage0.putMyVar('cate_button', cates)\\n            }\\n            if (typeof setPreResult != 'undefined') {\\n                items = d.concat(items);\\n                //清空继承数组\\n                d.length = 0;\\n                setPreResult(items);\\n            } else {\\n                items.forEach(item => {\\n                    d.push(item);\\n                })\\n            }\\n        },\\n    };\\n    obj.预设(options);\\n    return obj;\\n}\\n\\nvar 状态 =\\n    typeof 状态标记 != \\\"undefined\\\" && 状态标记 != \\\"\\\" ? 状态标记 : MY_RULE.url;\\n\\nlet dt_debug = false;\\n\\naddListener(\\n    \\\"onClose\\\",\\n    $.toString(() => {})\\n);\\n\\nvar Create = {\\n    nextPage: function() {\\n        var result = false;\\n        try {\\n            var next = eval(下一页);\\n            //log('n:'+next)\\n            if (next == \\\"\\\") {\\n                throw new Error('下一页链接为空')\\n            }\\n            result = true;\\n            if (true_url == next) {\\n                result = false;\\n            }\\n        } catch (e) {\\n            //log(\\\"可能不存在下一页或者下一页定位有问题\\\");\\n            log(\\\"错误信息:\\\" + e.message);\\n        }\\n        if ((next == \\\"\\\" || next == undefined) && page == 1) {\\n            next = true_url;\\n        } else {\\n            //result=false;\\n            next = getMyVar(状态);\\n        }\\n        //log('l'+true_url)\\n        //log('n'+next)\\n        if (page != 1) {\\n            if (true_url == next && !result) {\\n                result = false;\\n            } else {\\n                result = true;\\n            }\\n        }\\n        return result;\\n        //putMyVar(状态, next);\\n    },\\n    getBackImage: function(imgurl) {\\n        var result = imgurl;\\n        try {\\n            result = /url(?:\\\\s+)?\\\\((.*?)\\\\)/g\\n                .exec(imgurl)[1]\\n                .replace(/('|\\\"|&quot;)/gm, \\\"\\\");\\n        } catch {}\\n        return result;\\n    },\\n    httpHandle: function(input) {\\n        if (input.startsWith(\\\"http\\\")) {\\n            return input;\\n        } else if (input.startsWith(\\\"//\\\")) {\\n            return \\\"https:\\\" + input;\\n        } else if (input.startsWith(\\\"/\\\")) {\\n            return MY_HOME + input;\\n        }\\n    },\\n    imgHandle: function(item, rule) {\\n        var img = \\\"\\\";\\n        if (rule.img.startsWith(\\\"pd\\\")) {\\n            img = eval(rule.img);\\n        } else if (rule.backimg) {\\n            img = pdfh(item, rule.img);\\n            img = this.getBackImage(img);\\n            img = this.httpHandle(img);\\n        } else {\\n            img = pdfh(item, rule.img);\\n            if (!img.startsWith(\\\"http\\\")) {\\n                img = pd(item, rule.img);\\n                img = this.httpHandle(img);\\n            }\\n        }\\n        return img + rule.ref;\\n    },\\n    urlHandle: function(item, rule) {\\n        var href = \\\"\\\";\\n        if (rule.url.startsWith(\\\"pd\\\")) {\\n            href = eval(rule.url);\\n        } else {\\n            href = pd(item, rule.url);\\n        }\\n        href = rule.imt ? href + \\\"#immersiveTheme#\\\" : href;\\n        return href;\\n    },\\n    setContent: function(item, input) {\\n        let output = \\\"\\\";\\n        if (input == undefined) {\\n            return output;\\n        }\\n        if (input.startsWith(\\\"pd\\\")) {\\n            output = eval(input);\\n        } else {\\n            output = pdfh(item, input);\\n        }\\n        return output;\\n    },\\n    refresh: function() {\\n        addListener(\\n            \\\"onRefresh\\\",\\n            $.toString((u) => {\\n                clearMyVar(\\\"yilist\\\");\\n                //var p = storage0.getMyVar('spage', '');\\n                //putMyVar(u, p);\\n            }, 状态)\\n        );\\n    },\\n    getBooleanValue: function(value, defaultValue) {\\n        return value !== undefined ? Boolean(value) : (defaultValue !== undefined ? defaultValue : true);\\n    },\\n    debuglog: function(i, item, rule, obj) {\\n        log('----------' + (i + 1) + ':调试开始----------');\\n        if (item.constructor == Object) {\\n            item = JSON.stringify(item);\\n        }\\n        log('item内容:\\\\r\\\\n' + item + '\\\\r\\\\n' +\\n            `\\\\n\\\\ttitle定位:  ${rule.title}  ---> 结果:  ${obj.title}` +\\n            `\\\\n\\\\tdesc定位:  ${rule.desc}  ---> 结果:  ${obj.desc}` +\\n            `\\\\n\\\\timg定位:  ${rule.img}  ---> 结果:  ${obj.img}` +\\n            (rule.content != undefined ? `\\\\n\\\\tcontent定位:  ${rule.content}  ---> 结果:  ${obj.content}` : '') +\\n            `\\\\n\\\\turl定位:  ${rule.url}  ---> 结果:  ${obj.url}`\\n        );\\n        log('----------' + (i + 1) + ':调试结束----------');\\n    },\\n    jsonList: function(arr, json, rule) {\\n        if (json.constructor != Object) {\\n            try {\\n                json = JSON.parse(json);\\n            } catch {}\\n        }\\n        if (json[rule.list] == undefined) {\\n            arr.push({\\n                title: '““””<font color=\\\"grey\\\"><small>无内容</small></font>',\\n                url: \\\"hiker://empty\\\",\\n                col_type: \\\"text_center_1\\\",\\n                extra: {},\\n            });\\n            return;\\n        }\\n        var debug = this.getBooleanValue(rule.debug, false);\\n        var empty = this.getBooleanValue(rule.empty);\\n        if (debug) {\\n            log('定位列表:' + rule.list);\\n        }\\n        json[rule.list].forEach((item, i) => {\\n            var title = eval(rule.title);\\n            var desc = eval(rule.desc);\\n            var content = eval(rule.content);\\n            var img = eval(rule.img) + rule.ref;\\n            var href = eval(rule.url);\\n            var url = rule.imt ? href + \\\"#immersiveTheme#\\\" : href;\\n            var lazy = rule.lazy ? rule.lazy : \\\"\\\";\\n\\n            var dd = {\\n                title: title,\\n                desc: desc,\\n                content: content,\\n                pic_url: img,\\n                url: (empty ? \\\"hiker://empty##\\\" : '') + url,\\n                col_type: rule.col_type,\\n                extra: {\\n                    img: img,\\n                },\\n            };\\n\\n            if (debug) {\\n                var rx = {\\n                    title,\\n                    desc,\\n                    img,\\n                    content,\\n                    url\\n                };\\n                this.debuglog(i, item, rule, rx);\\n            }\\n\\n            if (lazy != \\\"\\\") {\\n                dd[\\\"url\\\"] = href + lazy;\\n            }\\n            arr.push(dd);\\n        });\\n    },\\n    ruleList: function(arr, html, rule) {\\n        var list = pdfa(html,\\n            rule.list);\\n        var debug = this.getBooleanValue(rule.debug,\\n            false);\\n        var empty = this.getBooleanValue(rule.empty);\\n        if (debug) {\\n            log('定位列表:' + rule.list);\\n        }\\n        list.forEach((item, i) => {\\n            var title = this.setContent(item, rule.title);\\n            var desc = this.setContent(item, rule.desc);\\n            var img = this.imgHandle(item, rule);\\n            var url = this.urlHandle(item, rule);\\n            var content = this.setContent(item, rule.content);\\n\\n            if (debug) {\\n                var rx = {\\n                    title,\\n                    desc,\\n                    img,\\n                    content,\\n                    url\\n                };\\n                this.debuglog(i, item, rule, rx);\\n            }\\n\\n            var lazy = rule.lazy ? rule.lazy : \\\"\\\";\\n            var dd = {\\n                title: title,\\n                desc: desc,\\n                pic_url: img,\\n                url: (empty ? \\\"hiker://empty##\\\" : '') + url,\\n                content: content,\\n                col_type: rule.col_type,\\n                extra: {\\n                    img: img,\\n                },\\n            };\\n            if (lazy != \\\"\\\") {\\n                dd[\\\"url\\\"] = url + lazy;\\n            }\\n            arr.push(dd);\\n        });\\n    },\\n    List: function(arr, html, rule, param) {\\n        param = param ? param : {};\\n        var auto = param.auto ? param.auto : false;\\n        var show = param.show ? param.show : false;\\n        if (page == 1) {\\n            //this.spage.set(true_url);\\n        }\\n        this.refresh();\\n        var debug = this.getBooleanValue(rule.debug, false);\\n        var empty = this.getBooleanValue(rule.empty);\\n        var list = pdfa(html, rule.list);\\n        if (debug) {\\n            log('定位列表:' + rule.list);\\n        }\\n        //log(this.nextPage())\\n        if ((storage0.getMyVar('yi_isnext', 't') == 't' && list.length > 0) || page == 1) {\\n            list.forEach((item, i) => {\\n                deleteItem(\\\"pagenum\\\");\\n                deleteItem(\\\"pageline\\\");\\n                var id = \\\"\\\";\\n                var cls = \\\"\\\";\\n                var title = this.setContent(item, rule.title);\\n                var desc = this.setContent(item, rule.desc);\\n                var desc1 = this.setContent(item, rule.desc1);\\n                var img = this.imgHandle(item, rule);\\n                var url = this.urlHandle(item, rule);\\n                var content = this.setContent(item, rule.content);\\n\\n                if (debug) {\\n                    var rx = {\\n                        title,\\n                        desc,\\n                        img,\\n                        content,\\n                        url\\n                    };\\n                    this.debuglog(i, item, rule, rx);\\n                }\\n\\n                if (i == list.length - 1) {\\n                    id = \\\"lastid_\\\" + page;\\n                    cls = \\\"lastmark\\\";\\n                }\\n                d.push({\\n                    title: title,\\n                    desc: desc + '\\\\t\\\\t\\\\t' + desc1,\\n                    pic_url: img,\\n                    url: (empty ? \\\"hiker://empty##\\\" : '') + url,\\n                    content: content,\\n                    col_type: rule.col_type,\\n                    extra: {\\n                        img: img,\\n                        id: id,\\n                        cls: cls,\\n                    },\\n                });\\n                if (i == list.length - 1 && show) {\\n                    d.push({\\n                        col_type: \\\"line\\\",\\n                        extra: {\\n                            id: \\\"pageline\\\",\\n                        },\\n                    });\\n\\n                    d.push({\\n                        title: \\\"““””<small>加载中...</small>\\\",\\n                        url: \\\"hiker://empty\\\",\\n                        col_type: \\\"text_center_1\\\",\\n                        extra: {\\n                            id: \\\"pagenum\\\",\\n                        },\\n                    });\\n                }\\n            });\\n        } else {\\n            updateItem(\\\"pagenum\\\", {\\n                title: '““””<font color=\\\"grey\\\"><small>到底了</small></font>',\\n                url: \\\"hiker://empty\\\",\\n                col_type: \\\"text_center_1\\\",\\n                extra: {\\n                    id: \\\"last\\\",\\n                },\\n            });\\n        }\\n        if (list.length == 0 && page == 1) {\\n            d.push({\\n                col_type: \\\"line\\\",\\n            });\\n            d.push({\\n                title: '““””<font color=\\\"grey\\\"><small>无内容</small></font>',\\n                url: \\\"hiker://empty\\\",\\n                col_type: \\\"text_center_1\\\",\\n                extra: {},\\n            });\\n        }\\n        if (this.nextPage()) {\\n            //log('t');\\n            storage0.putMyVar('yi_isnext', 't');\\n        } else {\\n            //log('f');\\n            storage0.putMyVar('yi_isnext', 'f');\\n        }\\n        if (auto) {\\n            //createNextPage();\\n            autoPage();\\n        }\\n    },\\n};\\n\\nvar extMethod = {\\n    ToParams: function() {\\n        var json = arguments[0];\\n        return Object.keys(json)\\n            .map((key) => key + \\\"=\\\" + json[key])\\n            .join(\\\"&\\\");\\n    },\\n    urlParse: function(u) {\\n        var dict = {};\\n        dict.Source = u;\\n        let params = (url) => {\\n            let queryParams = {};\\n            let reg = /([^?=&]+)=([^?=&]+)/g;\\n            url.replace(reg, function() {\\n                queryParams[arguments[1]] = arguments[2];\\n            });\\n            return queryParams;\\n        };\\n        var javaUrl = JavaImporter(java.net.URL);\\n        with(javaUrl) {\\n            var url = new URL(u);\\n            dict.Protocol = url.getProtocol();\\n            dict.Host = url.getHost();\\n            dict.Port = url.getPort();\\n            dict.File = url.getFile();\\n            dict.Path = url.getPath();\\n            dict.Ref = url.getRef();\\n            dict.Hosts = `${dict.Protocol}://${url.getHost()}`;\\n        }\\n        dict.Params = params(u);\\n        return dict;\\n    },\\n    isEqual: function(x, y) {\\n        const ok = Object.keys,\\n            tx = typeof x,\\n            ty = typeof y;\\n        return x && y && tx === \\\"object\\\" && tx === ty ?\\n            ok(x).length === ok(y).length &&\\n            ok(x).every((key) => this.isEqual(x[key], y[key])) : x === y;\\n    },\\n    findDifferentIndex: function(str1, str2) {\\n        const diffChars = [];\\n        for (let i = 0; i < str2.length; i++) {\\n            if (str1[i] !== str2[i]) {\\n                diffChars.push({\\n                    index: i,\\n                    s1: str1[i],\\n                    s2: str2[i],\\n                });\\n            }\\n        }\\n        return diffChars;\\n    },\\n    replaceCharAt: function(str, index, replacement) {\\n        if (index < 0 || index >= str.length) {\\n            return str;\\n        }\\n        //log(index)\\n        const arr = str.split(\\\"\\\");\\n        arr[index] = replacement;\\n        return arr.join(\\\"\\\");\\n    },\\n    getObjectKeysDiff: function(obj1, obj2) {\\n        const differentKeys = [];\\n        for (let key in obj1) {\\n            if (!obj2.hasOwnProperty(key) || obj1[key] !== obj2[key]) {\\n                differentKeys.push(key);\\n            }\\n        }\\n        for (let key in obj2) {\\n            if (!obj1.hasOwnProperty(key)) {\\n                differentKeys.push(key);\\n            }\\n        }\\n        return differentKeys;\\n    },\\n    getNextUrl: function(source, target, params) {\\n        var u1 = this.urlParse(source);\\n        var u2 = this.urlParse(target);\\n        var pa = undefined;\\n        if (typeof params == \\\"object\\\") {\\n            pa = params.hasOwnProperty(\\\"特征\\\") ? params.特征 : undefined;\\n        }\\n        var nexturl = source;\\n        var ca = Object.keys(u2.Params).length == 0 ? \\\"\\\" : \\\"?\\\";\\n        if (pa != undefined) {\\n            var rs = String(u2.Path).replace(new RegExp(pa), \\\"$1fypage\\\");\\n            nexturl = u2.Hosts + rs + ca + this.ToParams(u2.Params);\\n        } else {\\n            if (this.isEqual(u1.Params, u2.Params)) {\\n                if (dt_debug) {\\n                    log(u1.Path);\\n                    log(u2.Path);\\n                }\\n                var df = this.findDifferentIndex(String(u1.Path), String(u2.Path));\\n                if (dt_debug) {\\n                    log(df);\\n                }\\n                if (df.length == 1) {\\n                    var re = df[0].index;\\n                } else {\\n                    var f = df.filter((x) => /\\\\d+/.test(x.s2));\\n                    var re = f[0].index;\\n                }\\n                var eq = this.replaceCharAt(String(u2.Path), re, \\\"fypage\\\");\\n                nexturl = u2.Hosts + eq + ca + this.ToParams(u2.Params);\\n            } else {\\n                var ep = this.getObjectKeysDiff(u1.Params, u2.Params)\\n                if (ep.length == 1) {\\n                    u1.Params[ep[0]] = 'fypage'\\n                } else {\\n                    log(ep);\\n                }\\n                var eq = String(u1.Path).replace(/\\\\d+/, \\\"fypage\\\");\\n                nexturl = u1.Hosts + eq + ca + this.ToParams(u1.Params);\\n            }\\n        }\\n        //log('next:'+nexturl)\\n        return nexturl;\\n    },\\n};\\n\\nfunction getTruelink(mark, url, page) {\\n    var p = getMyVar(mark, url).replace(\\\"fypage\\\", page);\\n    if (page == 1) {\\n        return getMyVar(\\\"yi_firstpage\\\", p);\\n    } else if (p != \\\"\\\") {\\n        return p;\\n    } else {\\n        return url;\\n    }\\n}\\n//构建\\nfunction createNextPage() {\\n    let startnum = 1;\\n    var obj = arguments[0];\\n    if (true_url != getMyVar(\\\"yi_pageurl\\\", \\\"\\\")) {\\n        clearMyVar(\\\"yi_pageurl\\\");\\n    }\\n    if (page == startnum && getMyVar(\\\"yi_pageurl\\\") == \\\"\\\") {\\n        putMyVar(\\\"yi_firstpage\\\", true_url);\\n        try {\\n            var next = eval(下一页);\\n            //log(\\\"next\\\");\\n            //log(next);\\n        } catch {\\n            log(\\\"可能不存在下一页或者下一页定位有问题\\\");\\n            next = \\\"\\\";\\n        }\\n        if (next != \\\"\\\") {\\n            var nxurl = extMethod.getNextUrl(true_url, next, obj);\\n            //log(\\\"nxurl:\\\" + nxurl);\\n            putMyVar(状态, nxurl);\\n            putMyVar(\\\"yi_pageurl\\\", nxurl);\\n        }\\n    }\\n}\\n\\nfunction autoPage() {\\n    if (page == 1) {\\n        putMyVar(\\\"yi_firstpage\\\", true_url);\\n    }\\n    try {\\n        var next = eval(下一页);\\n        //log(\\\"next\\\");\\n        //log('next:'+next);\\n    } catch {\\n        log(\\\"可能不存在下一页或者下一页定位有问题\\\");\\n        next = \\\"\\\";\\n    }\\n    if (next != \\\"\\\") {\\n        putMyVar(状态, next);\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"解析\",\"path\":\"lazy\",\"rule\":\"var lazy = $('').lazyRule((MY_HOME,rule) => { \\n        return \\\"hiker://page/aliyun?rule=云盘君.简&page=fypage&realurl=\\\" + encodeURIComponent(input);\\n}, MY_HOME, MY_RULE.title)\"},{\"col_type\":\"movie_3\",\"name\":\"下载\",\"path\":\"down\",\"rule\":\"js:\\nvar d = [];\\nMY_URL = MY_URL.replace('hiker://empty##', '');\\nvar html = request(MY_URL);\\n\\nlet arr = pdfa(html, 'body&&.list-group&&li');\\nfor (let it of arr) {\\n    let t = pdfh(it, \\\"Text\\\");\\n    if (!t || t == \\\"\\\") {\\n        continue;\\n    }\\n    d.push({\\n        title: '<middle><font color=#FFA500>'+t+'</font></middle>',\\n        url: \\\"\\\",\\n        col_type: \\\"rich_text\\\"\\n    });\\n}\\n\\nd.push({\\n       title:  '““””<middle><font color=red>网盘下载</font></middle>',\\n       url: 'hiker://empty',\\n       col_type: 'text_center_1',\\n       extra:{lineVisible:false}\\n  });\\n\\nvar list = pdfa(html, '.col-md-5,1&&a');\\nlist.forEach(x => {   \\n    d.push({\\n       title: pdfh(x, 'Text'),\\n       url: pd(x, 'a&&href'),\\n       col_type: 'text_3',\\n  });\\n})\\n\\nd.push({\\n       title:  '““””<middle><font color=yellow>提取密码：点击复制</font></middle>',\\n       url: 'hiker://empty',\\n       col_type: 'text_center_1',\\n       extra:{lineVisible:false}\\n  });\\n\\nvar list1 = pdfa(html, 'body&&.col-md-5,1&&.list-group&&li').slice(-3);\\nlist1.forEach(x => {   \\n    d.push({\\n       title: pdfh(x, 'Text').replace('密码：','').replace(/\\\\./g,''),\\n       url: 'copy://' + pdfh(x, 'Text').replace(/.*?：(.*)/,'$1'),\\n       col_type: 'text_3',\\n  });\\n})\\n\\nsetResult(d)\"}]","proxy":"","icon":"https://www.yxssp.com/favicon.ico"}